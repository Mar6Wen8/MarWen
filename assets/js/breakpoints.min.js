// Definice modulu pro zachycení breakpointů
var breakpoints = (function () {
    "use strict";

    // Inicializace breakpointů
    function initBreakpoints(list) {
        handler.init(list);
    }

    // Objekt obsahující metody pro zachycení breakpointů
    var handler = {
        list: null,
        media: {},
        events: [],

        // Inicializace zachycovače
        init: function (list) {
            handler.list = list;
            
            // Přidání posluchačů událostí
            window.addEventListener("resize", handler.poll);
            window.addEventListener("orientationchange", handler.poll);
            window.addEventListener("load", handler.poll);
            window.addEventListener("fullscreenchange", handler.poll);
        },

        // Funkce pro zjištění aktivního breakpointu
        active: function (query) {
            var type, value, min, max, condition;

            if (!(query in handler.media)) {
                if (">=" == query.substr(0, 2)) {
                    type = "gte";
                    value = query.substr(2);
                } else if ("<=" == query.substr(0, 2)) {
                    type = "lte";
                    value = query.substr(2);
                } else if (">" == query.substr(0, 1)) {
                    type = "gt";
                    value = query.substr(1);
                } else if ("<" == query.substr(0, 1)) {
                    type = "lt";
                    value = query.substr(1);
                } else if ("!" == query.substr(0, 1)) {
                    type = "not";
                    value = query.substr(1);
                } else {
                    type = "eq";
                    value = query;
                }

                if (value && value in handler.list) {
                    condition = handler.list[value];

                    if (Array.isArray(condition)) {
                        min = parseInt(condition[0]);
                        max = parseInt(condition[1]);

                        if (isNaN(min)) {
                            if (isNaN(max)) return;
                            condition = condition[1].substr(String(max).length);
                        } else {
                            condition = condition[0].substr(String(min).length);
                        }

                        if (isNaN(min)) {
                            switch (type) {
                                case "gte":
                                    type = "screen";
                                    break;
                                case "lte":
                                    type = "screen and (max-width: " + max + condition + ")";
                                    break;
                                case "gt":
                                    type = "screen and (min-width: " + (max + 1) + condition + ")";
                                    break;
                                case "lt":
                                    type = "screen and (max-width: -1px)";
                                    break;
                                case "not":
                                    type = "screen and (min-width: " + (max + 1) + condition + ")";
                                    break;
                                default:
                                    type = "screen and (max-width: " + max + condition + ")";
                            }
                        } else if (isNaN(max)) {
                            switch (type) {
                                case "gte":
                                    type = "screen and (min-width: " + min + condition + ")";
                                    break;
                                case "lte":
                                    type = "screen";
                                    break;
                                case "gt":
                                    type = "screen and (max-width: -1px)";
                                    break;
                                case "lt":
                                    type = "screen and (max-width: " + (min - 1) + condition + ")";
                                    break;
                                case "not":
                                    type = "screen and (max-width: " + (min - 1) + condition + ")";
                                    break;
                                default:
                                    type = "screen and (min-width: " + min + condition + ")";
                            }
                        } else {
                            switch (type) {
                                case "gte":
                                    type = "screen and (min-width: " + min + condition + ")";
                                    break;
                                case "lte":
                                    type = "screen and (max-width: " + max + condition + ")";
                                    break;
                                case "gt":
                                    type = "screen and (min-width: " + (max + 1) + condition + ")";
                                    break;
                                case "lt":
                                    type = "screen and (max-width: " + (min - 1) + condition + ")";
                                    break;
                                case "not":
                                    type = "screen and (max-width: " + (min - 1) + condition + "), screen and (min-width: " + (max + 1) + condition + ")";
                                    break;
                                default:
                                    type = "screen and (min-width: " + min + condition + ") and (max-width: " + max + condition + ")";
                            }
                        }
                    } else {
                        type = "(" == condition.charAt(0) ? "screen and " + condition : condition;
                    }

                    handler.media[query] = !!type && type;
                }
            }

            // Porovnání s aktuálními médii pomocí matchMedia
            return handler.media[query] !== !1 && window.matchMedia(handler.media[query]).matches;
        },

        // Přidání události pro konkrétní breakpoint
        on: function (query, handlerFunction) {
            handler.events.push({ query: query, handler: handlerFunction, state: !1 });
            
            // Zavolání handleru, pokud je breakpoint aktuálně aktivní
            if (handler.active(query)) handlerFunction();
        },

        // Pravidelný průzkum aktivních breakpointů
        poll: function () {
            var event, i;
            for (i = 0; i < handler.events.length; i++) {
                event = handler.events[i];
                if (handler.active(event.query)) {
                    if (!event.state) {
                        event.state = !0;
                        event.handler();
                    }
                } else {
                    if (event.state) event.state = !1;
                }
            }
        },
    };

    // Přidání metod do objektu initBreakpoints
    initBreakpoints._ = handler;
    initBreakpoints.on = function (query, handlerFunction) {
        handler.on(query, handlerFunction);
    };
    initBreakpoints.active = function (query) {
        return handler.active(query);
    };

    return initBreakpoints;
})();

// Zajištění dostupnosti modulu v různých prostředích
(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        global.breakpoints = factory();
    }
})(this, function () {
    return breakpoints;
});